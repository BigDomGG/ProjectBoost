using UnityEngine;

public class Movement : MonoBehaviour
{
    [SerializeField] float mainThrust = 100f;
    [SerializeField] float rotationThrust = 1f;
    [SerializeField] AudioClip mainEngine;

    [SerializeField] ParticleSystem mainEngineParticles;
    [SerializeField] ParticleSystem engine1Particles;
    [SerializeField] ParticleSystem engine2Particles;
    [SerializeField] ParticleSystem engine3Particles;
    [SerializeField] ParticleSystem engine4Particles;

    Rigidbody rb;
    AudioSource audioSource;

    // Start is called before the first frame update
    void Start()
    {
        rb = GetComponent<Rigidbody>();
        audioSource = GetComponent<AudioSource>();
    }

    // Update is called once per frame
    void Update()
    {
        ProcessThrust();
        ProcessRotation();
    }

    void ProcessThrust()
    {
        if (Input.GetKey(KeyCode.Space))
        {
            StartThrusting();
        }
        else
        {
            audioSource.Stop();
            mainEngineParticles.Stop();
        }
    }

    void StartThrusting()
    {
        rb.AddRelativeForce(Vector3.up * mainThrust * Time.deltaTime);
        if (!audioSource.isPlaying)
        {
            audioSource.PlayOneShot(mainEngine);
        }

        if (!mainEngineParticles.isPlaying)
        {
            mainEngineParticles.Play();
        }
    }

    void ProcessRotation() 
    {
        if (Input.GetKey(KeyCode.A))
        {
            LeftRotationThrust();
        }

        else if (Input.GetKey(KeyCode.D))
        {
            RightRotationThrust();
        }

        else
        {
            engine1Particles.Stop();
            engine2Particles.Stop();
            engine3Particles.Stop();
            engine4Particles.Stop();
        }
    }

    void RightRotationThrust()
    {
        ApplyRotation(-rotationThrust);

        if (!engine1Particles.isPlaying)
        {
            engine1Particles.Play();
        }

        if (!engine3Particles.isPlaying)
        {
            engine3Particles.Play();
        }

    }

    void LeftRotationThrust()
    {
        ApplyRotation(rotationThrust);

        if (!engine2Particles.isPlaying)
        {
            engine2Particles.Play();
        }

        if (!engine4Particles.isPlaying)
        {
            engine4Particles.Play();
        }
    }

    void ApplyRotation(float rotationThisFrame)
    {
        rb.freezeRotation = true; // freeze rotation to manually rotate
        transform.Rotate(Vector3.forward * rotationThisFrame * Time.deltaTime);
        rb.freezeRotation = false; // unfreeze rotation for physics engine
    }
}
